/* variable 'arr' allocated vreg 10 */
/* variable 'i' allocated vreg 11 */
/* Function 'read_m500x500' uses 0 bytes of memory and 12 virtual registers */
/* variable 'a' allocated 2000000 bytes of storage at offset 0 */
/* variable 'b' allocated 2000000 bytes of storage at offset 2000000 */
/* variable 'c' allocated 2000000 bytes of storage at offset 4000000 */
/* variable 'M' allocated vreg 10 */
/* variable 'i' allocated vreg 11 */
/* variable 'j' allocated vreg 12 */
/* variable 'k' allocated vreg 13 */
/* variable 'r' allocated vreg 14 */
/* variable 'val' allocated vreg 15 */
/* Function 'main' uses 6000000 bytes of memory and 16 virtual registers */
	.section .text

	.globl read_m500x500
read_m500x500:
	enter    $0
	mov_q    vr10, vr1
	mov_l    vr12, $0
	mov_l    vr11, vr12
	jmp      .L1
.L0:
	call     read_i64
	mov_q    vr12, vr0
	sconv_lq vr13, vr11
	mul_q    vr14, vr13, $8
	add_q    vr15, vr10, vr14
	mov_q    (vr15), vr12
	mov_l    vr16, $1
	add_l    vr17, vr11, vr16
	mov_l    vr11, vr17
.L1:
	mov_l    vr18, $250000
	cmplt_l  vr19, vr11, vr18
	cjmp_t   vr19, .L0
	jmp      .Lread_m500x500_return
.Lread_m500x500_return:
	leave    $0
	ret      

	.globl main
main:
	enter    $6000000
	mov_l    vr16, $500
	mov_l    vr10, vr16
	localaddr vr17, $0
	mov_l    vr18, $0
	sconv_lq vr19, vr18
	mul_q    vr20, vr19, $4000
	add_q    vr21, vr17, vr20
	mov_l    vr22, $0
	sconv_lq vr23, vr22
	mul_q    vr24, vr23, $8
	add_q    vr25, vr21, vr24
	mov_q    vr1, vr25
	call     read_m500x500
	localaddr vr26, $2000000
	mov_l    vr27, $0
	sconv_lq vr28, vr27
	mul_q    vr29, vr28, $4000
	add_q    vr30, vr26, vr29
	mov_l    vr31, $0
	sconv_lq vr32, vr31
	mul_q    vr33, vr32, $8
	add_q    vr34, vr30, vr33
	mov_q    vr1, vr34
	call     read_m500x500
	mov_l    vr35, $0
	mov_l    vr11, vr35
	jmp      .L3
.L2:
	mov_l    vr16, $0
	mov_l    vr12, vr16
	jmp      .L5
.L4:
	mov_q    vr16, $0
	localaddr vr17, $4000000
	sconv_lq vr18, vr11
	mul_q    vr19, vr18, $4000
	add_q    vr20, vr17, vr19
	sconv_lq vr21, vr12
	mul_q    vr22, vr21, $8
	add_q    vr23, vr20, vr22
	mov_q    (vr23), vr16
	mov_l    vr24, $1
	add_l    vr25, vr12, vr24
	mov_l    vr12, vr25
.L5:
	cmplt_l  vr26, vr12, vr10
	cjmp_t   vr26, .L4
	mov_l    vr27, $1
	add_l    vr28, vr11, vr27
	mov_l    vr11, vr28
.L3:
	cmplt_l  vr29, vr11, vr10
	cjmp_t   vr29, .L2
	mov_l    vr30, $0
	mov_l    vr13, vr30
	jmp      .L7
.L6:
	mov_l    vr16, $0
	mov_l    vr11, vr16
	jmp      .L9
.L8:
	localaddr vr16, $0
	sconv_lq vr17, vr11
	mul_q    vr18, vr17, $4000
	add_q    vr19, vr16, vr18
	sconv_lq vr20, vr13
	mul_q    vr21, vr20, $8
	add_q    vr22, vr19, vr21
	mov_q    vr23, (vr22)
	mov_q    vr14, vr23
	mov_l    vr24, $0
	mov_l    vr12, vr24
	jmp      .L11
.L10:
	localaddr vr16, $4000000
	sconv_lq vr17, vr11
	mul_q    vr18, vr17, $4000
	add_q    vr19, vr16, vr18
	sconv_lq vr20, vr12
	mul_q    vr21, vr20, $8
	add_q    vr22, vr19, vr21
	mov_q    vr23, (vr22)
	mov_q    vr15, vr23
	localaddr vr24, $2000000
	sconv_lq vr25, vr13
	mul_q    vr26, vr25, $4000
	add_q    vr27, vr24, vr26
	sconv_lq vr28, vr12
	mul_q    vr29, vr28, $8
	add_q    vr30, vr27, vr29
	mov_q    vr32, (vr30)
	mul_q    vr31, vr14, vr32
	add_q    vr33, vr15, vr31
	mov_q    vr15, vr33
	localaddr vr34, $4000000
	sconv_lq vr35, vr11
	mul_q    vr36, vr35, $4000
	add_q    vr37, vr34, vr36
	sconv_lq vr38, vr12
	mul_q    vr39, vr38, $8
	add_q    vr40, vr37, vr39
	mov_q    (vr40), vr15
	mov_l    vr41, $1
	add_l    vr42, vr12, vr41
	mov_l    vr12, vr42
.L11:
	cmplt_l  vr43, vr12, vr10
	cjmp_t   vr43, .L10
	mov_l    vr44, $1
	add_l    vr45, vr11, vr44
	mov_l    vr11, vr45
.L9:
	cmplt_l  vr46, vr11, vr10
	cjmp_t   vr46, .L8
	mov_l    vr47, $1
	add_l    vr48, vr13, vr47
	mov_l    vr13, vr48
.L7:
	cmplt_l  vr49, vr13, vr10
	cjmp_t   vr49, .L6
	mov_l    vr50, $0
	mov_l    vr11, vr50
	jmp      .L13
.L12:
	mov_l    vr16, $0
	mov_l    vr12, vr16
	jmp      .L15
.L14:
	localaddr vr16, $4000000
	sconv_lq vr17, vr11
	mul_q    vr18, vr17, $4000
	add_q    vr19, vr16, vr18
	sconv_lq vr20, vr12
	mul_q    vr21, vr20, $8
	add_q    vr22, vr19, vr21
	mov_q    vr1, (vr22)
	call     print_i64
	call     print_nl
	mov_l    vr23, $1
	add_l    vr24, vr12, vr23
	mov_l    vr12, vr24
.L15:
	cmplt_l  vr25, vr12, vr10
	cjmp_t   vr25, .L14
	mov_l    vr26, $1
	add_l    vr27, vr11, vr26
	mov_l    vr11, vr27
.L13:
	cmplt_l  vr28, vr11, vr10
	cjmp_t   vr28, .L12
	mov_l    vr29, $0
	mov_l    vr0, vr29
	jmp      .Lmain_return
	jmp      .Lmain_return
.Lmain_return:
	leave    $6000000
	ret      
