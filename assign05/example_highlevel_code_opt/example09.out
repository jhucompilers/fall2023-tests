/* variable 'a' allocated vreg 10 */
/* variable 'n' allocated vreg 11 */
/* variable 'i' allocated vreg 12 */
/* variable 'sum' allocated vreg 13 */
/* Function 'sum' uses 0 bytes of memory and 14 virtual registers */
/* variable 'arr' allocated 12 bytes of storage at offset 0 */
/* variable 'result' allocated vreg 10 */
/* Function 'main' uses 12 bytes of memory and 11 virtual registers */
/* allocate machine register %rbx to variable 'i' (vr12), rank is 81 */
/* allocate machine register %r12 to variable 'sum' (vr13), rank is 42 */
/* allocate machine register %r13 to variable 'a' (vr10), rank is 20 */
/* allocate machine register %r14 to variable 'n' (vr11), rank is 20 */
	.section .text

	.globl sum
sum:
	enter    $0
	mov_q    vr10, vr1
	mov_l    vr11, vr2
	mov_l    vr13, $0
	mov_l    vr12, $0
	jmp      .L1
.L0:
	sconv_lq vr14<%r9>, vr12
	mul_q    vr15<%r8>, vr14<%r9>, $4
	add_q    vr16<%rcx>, vr10, vr15<%r8>
	mov_l    vr18<%edx>, (vr16<%ecx>)
	add_l    vr17<%esi>, vr13, vr18<%edx>
	mov_l    vr13, vr17<%esi>
	add_l    vr20<%edi>, vr12, $1
	mov_l    vr12, vr20<%edi>
.L1:
	cmplt_l  vr21<%r9d>, vr12, vr11
	cjmp_t   vr21<%r9d>, .L0
	mov_l    vr0, vr13
	jmp      .Lsum_return
.Lsum_return:
	leave    $0
	ret      
/* allocate machine register %rbx to variable 'result' (vr10), rank is 2 */

	.globl main
main:
	enter    $12
	localaddr vr12<%r9>, $0
	add_q    vr16<%r8>, vr12<%r9>, $0
	mov_l    (vr16<%r8d>), $1
	add_q    vr22<%rcx>, vr12<%r9>, $4
	mov_l    (vr22<%ecx>), $2
	add_q    vr28<%rdx>, vr12<%r9>, $8
	mov_l    (vr28<%edx>), $3
	mov_q    vr1, vr12<%r9>
	mov_l    vr2, $3
	call     sum
	jmp      .Lmain_return
.Lmain_return:
	leave    $12
	ret      
